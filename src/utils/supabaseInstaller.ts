
import { DatabaseConfig } from '@/types/database';

export const addLog = (
  message: string, 
  setInstallationLog: (fn: (prev: string[]) => string[]) => void
) => {
  const timestamp = new Date().toLocaleTimeString();
  const logMessage = `${timestamp}: ${message}`;
  setInstallationLog(prev => [...prev, logMessage]);
  console.log('[SecretInstall]', logMessage);
};

export const testSupabaseConnection = async (
  config: DatabaseConfig,
  addLogFn: (message: string) => void
): Promise<boolean> => {
  try {
    if (!config.supabaseUrl || !config.supabaseServiceKey) {
      throw new Error('URL do Supabase e Service Key s√£o obrigat√≥rios');
    }
    
    if (!config.supabaseUrl.includes('supabase.co')) {
      throw new Error('URL do Supabase deve conter "supabase.co"');
    }

    if (!config.supabaseServiceKey.startsWith('eyJ')) {
      throw new Error('Service Key deve ser um JWT v√°lido come√ßando com "eyJ"');
    }

    const cleanUrl = config.supabaseUrl.replace(/\/$/, '');
    addLogFn('Configura√ß√£o Supabase validada localmente');
    addLogFn(`Testando conex√£o com: ${cleanUrl}`);

    const { createClient } = await import('@supabase/supabase-js');
    const targetSupabase = createClient(cleanUrl, config.supabaseServiceKey);
    
    addLogFn('Testando Service Key...');
    
    // Teste simples de conex√£o
    const { error: testError } = await targetSupabase
      .from('_nonexistent_table')
      .select('*')
      .limit(1);

    // Se chegou aqui, a Service Key √© v√°lida
    addLogFn('Service Key validada com sucesso!');
    addLogFn('Conex√£o estabelecida com sucesso!');
    addLogFn('Pronto para instala√ß√£o - instala√ß√£o limpa ser√° realizada');
    
    return true;
  } catch (error: any) {
    const errorMessage = error?.message || 'Erro desconhecido na conex√£o';
    addLogFn(`ERRO: ${errorMessage}`);
    return false;
  }
};

export const installSupabaseSchema = async (
  config: DatabaseConfig,
  addLogFn: (message: string) => void
): Promise<boolean> => {
  try {
    addLogFn('Iniciando instala√ß√£o do sistema...');
    
    const { createClient } = await import('@supabase/supabase-js');
    const targetSupabase = createClient(config.supabaseUrl!, config.supabaseServiceKey!);
    
    // Executar instala√ß√£o usando comandos SQL diretos
    addLogFn('Executando instala√ß√£o direta via SQL...');
    
    // Primeiro, tentar criar as tabelas b√°sicas
    const createTablesSQL = `
      -- Extens√µes necess√°rias
      CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
      CREATE EXTENSION IF NOT EXISTS "pgcrypto";
      
      -- Tabela de usu√°rios autorizados
      CREATE TABLE IF NOT EXISTS public.authorized_users (
        id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
        username TEXT UNIQUE NOT NULL,
        email TEXT UNIQUE NOT NULL,
        password_hash TEXT NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
      );
    `;

    try {
      // Tentar executar usando uma query direta
      const { error: tableError } = await targetSupabase.rpc('exec_sql', { 
        query: createTablesSQL 
      });
      
      if (tableError) {
        addLogFn('RPC exec_sql n√£o dispon√≠vel, usando m√©todo alternativo...');
        
        // M√©todo alternativo: tentar criar usu√°rio diretamente
        const { data: existingUsers, error: selectError } = await targetSupabase
          .from('authorized_users')
          .select('username')
          .eq('username', 'synclead')
          .limit(1);

        if (selectError) {
          addLogFn('Tabela n√£o existe ainda, tentando criar estrutura b√°sica...');
          // A tabela n√£o existe, vamos assumir que precisamos criar tudo
          addLogFn('‚ö†Ô∏è N√£o foi poss√≠vel criar tabelas automaticamente');
          addLogFn('üìã Execute este SQL manualmente no seu Supabase:');
          addLogFn('');
          addLogFn('-- COPIE E EXECUTE NO SQL EDITOR DO SEU SUPABASE:');
          addLogFn('CREATE EXTENSION IF NOT EXISTS "uuid-ossp";');
          addLogFn('CREATE EXTENSION IF NOT EXISTS "pgcrypto";');
          addLogFn('CREATE TABLE IF NOT EXISTS public.authorized_users (');
          addLogFn('  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,');
          addLogFn('  username TEXT UNIQUE NOT NULL,');
          addLogFn('  email TEXT UNIQUE NOT NULL,');
          addLogFn('  password_hash TEXT NOT NULL,');
          addLogFn('  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),');
          addLogFn('  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()');
          addLogFn(');');
          addLogFn('');
          addLogFn("INSERT INTO public.authorized_users (username, email, password_hash)");
          addLogFn("VALUES ('synclead', 'synclead@sistema.com', crypt('s1ncl3@d', gen_salt('bf')))");
          addLogFn("ON CONFLICT (username) DO NOTHING;");
          addLogFn('');
          addLogFn('üîÑ Ap√≥s executar o SQL, tente a instala√ß√£o novamente');
          
          return false;
        } else {
          addLogFn('‚úì Tabela authorized_users j√° existe');
          if (existingUsers && existingUsers.length > 0) {
            addLogFn('‚úì Usu√°rio synclead j√° existe');
          } else {
            addLogFn('Criando usu√°rio padr√£o...');
            const { error: insertError } = await targetSupabase
              .from('authorized_users')
              .insert({
                username: 'synclead',
                email: 'synclead@sistema.com',
                password_hash: 's1ncl3@d' // Senha simples por ora
              });

            if (insertError) {
              const errorMsg = insertError?.message || 'Erro desconhecido ao criar usu√°rio';
              if (!errorMsg.includes('already exists') && !errorMsg.includes('duplicate')) {
                addLogFn(`Erro ao criar usu√°rio: ${errorMsg}`);
                return false;
              }
            }
            addLogFn('‚úì Usu√°rio synclead criado');
          }
        }
      } else {
        addLogFn('‚úì Tabelas criadas via RPC');
        
        // Criar usu√°rio usando insert normal
        const { error: userError } = await targetSupabase
          .from('authorized_users')
          .insert({
            username: 'synclead',
            email: 'synclead@sistema.com',
            password_hash: 's1ncl3@d'
          });

        if (userError) {
          const errorMsg = userError?.message || 'Erro desconhecido';
          if (!errorMsg.includes('already exists') && !errorMsg.includes('duplicate')) {
            addLogFn(`Aviso ao criar usu√°rio: ${errorMsg}`);
          }
        }
        addLogFn('‚úì Usu√°rio padr√£o processado');
      }

      addLogFn('‚úì Instala√ß√£o conclu√≠da!');
      addLogFn('‚úì Credenciais: synclead / s1ncl3@d');
      addLogFn('‚úÖ Sistema pronto para usar');
      
      return true;
      
    } catch (sqlError: any) {
      const errorMsg = sqlError?.message || 'Erro desconhecido na execu√ß√£o SQL';
      addLogFn(`Erro SQL: ${errorMsg}`);
      return false;
    }
    
  } catch (error: any) {
    const errorMsg = error?.message || 'Erro cr√≠tico desconhecido';
    addLogFn(`ERRO CR√çTICO: ${errorMsg}`);
    return false;
  }
};

export const verifyInstallation = async (
  supabaseClient: any, 
  addLogFn: (message: string) => void
): Promise<boolean> => {
  try {
    addLogFn('Verificando instala√ß√£o...');
    
    // Tentar acessar a tabela de usu√°rios
    const { data, error } = await supabaseClient
      .from('authorized_users')
      .select('username')
      .limit(1);

    if (!error) {
      addLogFn('‚úì Tabelas principais encontradas');
      return true;
    } else {
      const errorMsg = error?.message || 'Erro na verifica√ß√£o';
      addLogFn(`‚ö†Ô∏è Verifica√ß√£o: ${errorMsg}`);
      return false;
    }
  } catch (error: any) {
    const errorMsg = error?.message || 'Erro desconhecido na verifica√ß√£o';
    addLogFn(`Erro na verifica√ß√£o: ${errorMsg}`);
    return false;
  }
};
