
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS'
};

serve(async (req) => {
  // Handle CORS preflight
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  if (req.method !== 'POST') {
    return new Response(JSON.stringify({
      error: 'Method not allowed',
      details: 'Only POST method is allowed'
    }), { 
      status: 405,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }

  try {
    const { host, port, database, username, password, schema } = await req.json();

    if (!host || !port || !database || !username || !password) {
      return new Response(JSON.stringify({
        error: 'Missing required fields',
        details: 'host, port, database, username, and password are required'
      }), { 
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    console.log(`üöÄ Iniciando exporta√ß√£o via Supabase client: ${database}@${host}:${port}`);

    // Usar cliente Supabase para conectar e fazer dump via API
    const supabaseUrl = `https://${host.replace('.supabase.co', '')}.supabase.co`;
    const supabase = createClient(supabaseUrl, password);

    // Buscar todas as tabelas do schema
    const { data: tables, error: tablesError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', schema || 'public')
      .eq('table_type', 'BASE TABLE');

    if (tablesError) {
      console.error('‚ùå Erro ao buscar tabelas:', tablesError);
      return new Response(JSON.stringify({
        error: 'Erro ao conectar com o banco de dados',
        details: tablesError.message
      }), { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    if (!tables || tables.length === 0) {
      return new Response(JSON.stringify({
        error: 'Nenhuma tabela encontrada',
        details: `N√£o foram encontradas tabelas no schema '${schema || 'public'}'`
      }), { 
        status: 404,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    console.log(`üìä Encontradas ${tables.length} tabelas para exportar`);

    let dumpContent = `-- Database dump created on ${new Date().toISOString()}
-- Source: ${database}@${host}:${port}
-- Schema: ${schema || 'public'}
-- Generated by Supabase Edge Function
--
-- To restore this dump, run:
-- psql -h [HOST] -p [PORT] -U [USERNAME] -d [DATABASE] -f [DUMP_FILE]
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

`;

    // Exportar dados de cada tabela
    for (const table of tables) {
      const tableName = table.table_name;
      console.log(`üìã Exportando tabela: ${tableName}`);

      try {
        // Buscar todos os dados da tabela
        const { data: tableData, error: dataError } = await supabase
          .from(tableName)
          .select('*');

        if (dataError) {
          console.error(`‚ùå Erro ao buscar dados da tabela ${tableName}:`, dataError);
          continue;
        }

        if (tableData && tableData.length > 0) {
          dumpContent += `\n-- Data for table: ${tableName}\n`;
          dumpContent += `DELETE FROM ${tableName};\n`;
          
          // Gerar INSERTs
          for (const row of tableData) {
            const columns = Object.keys(row).join(', ');
            const values = Object.values(row).map(val => {
              if (val === null) return 'NULL';
              if (typeof val === 'string') return `'${val.replace(/'/g, "''")}'`;
              if (typeof val === 'object') return `'${JSON.stringify(val).replace(/'/g, "''")}'`;
              return val;
            }).join(', ');
            
            dumpContent += `INSERT INTO ${tableName} (${columns}) VALUES (${values});\n`;
          }
          
          console.log(`‚úÖ Tabela ${tableName}: ${tableData.length} registros exportados`);
        } else {
          dumpContent += `\n-- Table ${tableName} is empty\n`;
          console.log(`‚ÑπÔ∏è Tabela ${tableName} est√° vazia`);
        }
      } catch (tableError: any) {
        console.error(`‚ùå Erro ao processar tabela ${tableName}:`, tableError);
        dumpContent += `\n-- Error exporting table ${tableName}: ${tableError.message}\n`;
      }
    }

    dumpContent += `\n-- Dump completed on ${new Date().toISOString()}\n`;

    console.log(`‚úÖ Dump conclu√≠do com sucesso. Tamanho: ${dumpContent.length} caracteres`);

    return new Response(JSON.stringify({
      success: true,
      dump: dumpContent,
      metadata: {
        timestamp: new Date().toISOString(),
        source: `${database}@${host}:${port}`,
        schema: schema || 'public',
        tables_count: tables.length,
        size_bytes: dumpContent.length,
        size_readable: `${Math.round(dumpContent.length / 1024)} KB`
      }
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200
    });

  } catch (error: any) {
    console.error('üí• ERRO GERAL NA EDGE FUNCTION:', error);
    
    return new Response(JSON.stringify({
      error: 'Database export failed',
      details: error.message,
      timestamp: new Date().toISOString()
    }), { 
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }
});
