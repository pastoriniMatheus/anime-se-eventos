
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS'
};

serve(async (req) => {
  // Handle CORS preflight
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  if (req.method !== 'POST') {
    return new Response(JSON.stringify({
      error: 'Method not allowed',
      details: 'Only POST method is allowed'
    }), { 
      status: 405,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }

  try {
    const { host, port, database, username, password, schema } = await req.json();

    if (!host || !port || !database || !username || !password) {
      return new Response(JSON.stringify({
        error: 'Missing required fields',
        details: 'host, port, database, username, and password are required'
      }), { 
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    console.log(`üöÄ Iniciando dump do banco: ${database}@${host}:${port}`);

    // Criar comando pg_dump
    const pgDumpCommand = [
      'pg_dump',
      '--host', host,
      '--port', port.toString(),
      '--username', username,
      '--dbname', database,
      '--schema', schema || 'public',
      '--verbose',
      '--no-password',
      '--format=plain',
      '--encoding=UTF8',
      '--no-privileges',
      '--no-owner',
      '--clean',
      '--if-exists'
    ];

    console.log('üìã Comando a ser executado:', pgDumpCommand.join(' '));

    // Configurar ambiente com senha
    const env = {
      ...Deno.env.toObject(),
      PGPASSWORD: password
    };

    // Executar pg_dump
    const process = new Deno.Command('pg_dump', {
      args: pgDumpCommand.slice(1), // Remove 'pg_dump' do in√≠cio
      env,
      stdout: 'piped',
      stderr: 'piped'
    });

    const { code, stdout, stderr } = await process.output();

    if (code !== 0) {
      const errorOutput = new TextDecoder().decode(stderr);
      console.error('‚ùå Erro no pg_dump:', errorOutput);
      
      let errorMessage = 'Erro ao executar dump do banco de dados';
      if (errorOutput.includes('authentication failed')) {
        errorMessage = 'Falha na autentica√ß√£o. Verifique usu√°rio e senha.';
      } else if (errorOutput.includes('could not connect')) {
        errorMessage = 'N√£o foi poss√≠vel conectar ao banco. Verifique host e porta.';
      } else if (errorOutput.includes('database') && errorOutput.includes('does not exist')) {
        errorMessage = 'Banco de dados n√£o encontrado.';
      }
      
      return new Response(JSON.stringify({
        error: errorMessage,
        details: errorOutput,
        exit_code: code
      }), { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    const dumpContent = new TextDecoder().decode(stdout);
    
    if (!dumpContent.trim()) {
      return new Response(JSON.stringify({
        error: 'Dump vazio',
        details: 'O comando pg_dump n√£o retornou conte√∫do'
      }), { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    console.log(`‚úÖ Dump conclu√≠do com sucesso. Tamanho: ${dumpContent.length} caracteres`);

    // Adicionar cabe√ßalho com informa√ß√µes do dump
    const timestamp = new Date().toISOString();
    const dumpHeader = `-- Database dump created on ${timestamp}
-- Source: ${database}@${host}:${port}
-- Schema: ${schema || 'public'}
-- Generated by Supabase Edge Function
--
-- To restore this dump, run:
-- psql -h [HOST] -p [PORT] -U [USERNAME] -d [DATABASE] -f [DUMP_FILE]
--

`;

    const finalDump = dumpHeader + dumpContent;

    return new Response(JSON.stringify({
      success: true,
      dump: finalDump,
      metadata: {
        timestamp,
        source: `${database}@${host}:${port}`,
        schema: schema || 'public',
        size_bytes: finalDump.length,
        size_readable: `${Math.round(finalDump.length / 1024)} KB`
      }
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200
    });

  } catch (error: any) {
    console.error('üí• ERRO GERAL NA EDGE FUNCTION:', error);
    
    return new Response(JSON.stringify({
      error: 'Database export failed',
      details: error.message,
      timestamp: new Date().toISOString()
    }), { 
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }
});
